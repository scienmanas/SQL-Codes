1. CRUD :
Create, Read, Update, Delete

2. Columns: structure, schema of database

3. Rows: Individual data

4. Creating Tables :

USE db_name;
CREATE TABLE table_name (
    column1_name datatype contraint,
    column2_name datatype contraint,
    column3_name datatype contraint,
   ....
);

5. Datatypes:

CHAR(50)      -> string(0-255)
VARCHAR(50)   -> string(0-255)
BLOB(1000)    -> string(0-65535) (can be used to store images and vidoes)
INT           -> integer(-2,147,483,648 to 2,147,483,647)
TINYINT       -> integer(-128 to 127)
BIGINT        -> integer(-9,223,372,036,854,775,808 to 9,223,372,036,775,807)
BIT(2)        -> can store x-bit values. x can range from 1 to 64
FLOAT         -> precision: 23
DOUBLE        -> precision: 24-53
BOOLEAN       -> Boolean values 0 or 1 (Not directly used in sql use tinyint)
DATE          -> format: YYYY-MM-DD ranging 1000-01-01 to 9999-12-31
YEAR          -> four digit format ranging from 1901 to 2155

6. Signed (Both Postive and negaive values) and Unsigned (only one type of values all space goes to particular type of number)

7. Types of Sql commands

DDL (Data Definition Language): create, alter, rename, truncate & drop
DQL (Data query language): select
DML (Data manipulation Language): insert, update & delete
DCL (Data control language): grant & revoke permission to users
TCL (Transition control Language): start transaction, commit, rollback

8. Databases related query

CREATE DATABASE db_name;
CREATE DATABASE IF NOT EXISTS db_name;

DROP DATABASE db_name;
DROP DATABASE IF EXISTS db_name;

SHOW DATABASE;
SHOW TABLES;

9. Tables related query

CREATE TABLE table_name (                     (give schema)
    column1_name datatype contraint,
    column2_name datatype contraint,
    column3_name datatype contraint,
   ....
);

10. Primary key is always not null

11. DROP TABLE student;

12. Insert into table

INSERT INTO table_name
(column1_name, column2_name)
VALUES
(col1_value1,col2_value1),
(col1_value2,col2_value2);

13. Keys in Databases

a) Primary Key: It is a column (or a set of columns) in a table that uniqely identifies each row. (a unique id). There is only 1 PK & it should be not null.

b) Foreign Key: A Foreign key is a column (or a set of columns) in a table that refers to the Primary key of another table. There can be multiple FKs. FKs can have duplicate and null values. 
e.g: When it is nullable, consider exampl of a book where we don't want it to be related to a author, i.e. the author is anonymous.

14. Images/Videos can be stored in BLOB data type,
CREATE TABLE image_storage (
    image_id INT PRIMARY KEY,
    image_data BLOB
);

INSERT INTO image_storage (image_id, image_data)
VALUES (1, LOAD_FILE('/path/to/your/image.jpg'));


15. Contarints:

NOT NULL: cannot have null value
UNIQUE: all values in the column are different
PRIMARY KEY: makes column unique and not null
FOREIGN KEY: prevent actions that would destroy links between tables.
DEFAULT: sets the default value
CHECK: it can limit the values allowed in a column

CREATE TABLE emp (
    id INT ,
    salary INT DEFAULT 25000
);


16. CREATE TABLE temp1 (
    id INT,
    name VARCHAR(50),
    city VARCHAR(20),
    PRIMARY KEY (id, name)
);

// Their combination will be null and unique

17. CREATE TABLE temp (
    cust_id INT,
    FOREIGN KEY (cust_id) REFERENCES customer(id)
);
Customer is table and id is paramter

18. CREATE TABLE city (
    id INT PRIMARY KEY,
    city VARCHAR(50),
    age INT,
    CONTRAINT age_check CHECK (age >= 18 AND city="Delhi")
);

CREATE TABLE newTab (
    age INT CHECK (age >= 18)
);

19. SELECT col1, col2, ... FROM <table>;
DISTICT keyword used to get distict data

20. Clauses: condition should be fullfilled 

a) WHERE clause: To define some conditions

SELECT * FROM student WHERE marks > 80;


21. Operators: Using Operators in WHERE

Arithmetic: +, -, *, /, % 
Comparison: =, !=, >, >=, <, <=
Logical: AND, OR, NOT, IN, BETWEEN, ALL, LIKE, ANY
Bitwise: & (Bitwise AND), | (Bitwise OR)

SELECT * FROM student WHERE marks > 80 AND marks < 90;
SELECT * FROM student WHERE marks > 80 OR marks < 90;
SELECT * FROM student WHERE NOT marks > 80;
SELECT * FROM student WHERE city IN ("Delhi", "Mumbai", "Gurgaon"); // Can write cities which are not in database
SELECT * FROM student WHERE marks BETWEEN 80 AND 90;
SELECT * FROM student WHERE marks LIKE '8%';
SELECT * FROM student WHERE marks LIKE '8_'; // _ is a single character wildcard

    SELECT * FROM student WHERE marks LIKE '8%';

    This query is retrieving all records from the "student" table where the "marks" column starts with the digit '8'. The % symbol is a wildcard character that matches any sequence of characters, so this query is looking for records where the "marks" column starts with '8' and can be followed by any number of characters.

    For example, it would match records where "marks" is '80', '85', '800', '89', etc.

    SELECT * FROM student WHERE marks LIKE '8_';

    This query is retrieving all records from the "student" table where the "marks" column has '8' as the first character and is followed by any single character. The underscore _ is a wildcard character that matches any single character.

    For example, it would match records where "marks" is '81', '82', '8A', '8%', etc., where the second character can be any single character.    SELECT * FROM student WHERE marks LIKE '8%';

    This query is retrieving all records from the "student" table where the "marks" column starts with the digit '8'. The % symbol is a wildcard character that matches any sequence of characters, so this query is looking for records where the "marks" column starts with '8' and can be followed by any number of characters.

    For example, it would match records where "marks" is '80', '85', '800', '89', etc.

    SELECT * FROM student WHERE marks LIKE '8_';

    This query is retrieving all records from the "student" table where the "marks" column has '8' as the first character and is followed by any single character. The underscore _ is a wildcard character that matches any single character.

    For example, it would match records where "marks" is '81', '82', '8A', '8%', etc., where the second character can be any single character.
 
b) LIMIT 

SELECT * FROM student LIMIT 2; // Only 2 rows will be shown

c) ORDER BY

SELECT * FROM student ORDER BY marks ASC; // Ascending order
SELECT * FROM student ORDER BY marks DESC; // Descending order

d) GROUP BY: group rows that have the same value into summary rows. It collects data from multiple records and groups the result by one or more column.

GROUP BY is used with aggregate functions like COUNT(), MAX() etc.

SELECT city, COUNT(*) FROM student GROUP BY city; // Group by city and count the number of students in each city

e) HAVING: similar to where, applies some condition on rows. Used when we want to apply any condition after grouping. 

HAVING is used with aggregate functions to filter the results.
SELECT country, AVG(marks) AS avgMarks FROM student GROUP BY country HAVING AVG(marks) > 7

f) JOIN: JOIN is used to combine rows from two or more tables based on a related column between them. Foreign key not compulsary.

SELECT * FROM student JOIN city ON student.city = city.city_name;

i) INNER JOIN: Returns records that have matching values in both tables

SELECT column(s)
FROM tableA
INNER JOIN tableB
ON tableA.column = tableB.column;

ii) LEFT JOIN: Returns all records from the left table, and the matched records from the right table

SELECT column(s)
FROM tableA
LEFT JOIN tableB
ON tableA.column = tableB.column;

iii) RIGHT JOIN: Returns all records from the right table, and the matched records from the left table

SELECT column(s)
FROM tableA
RIGHT  JOIN tableB
ON tableA.column = tableB.column;

iv) FULL JOIN: Returns all records when there is a match in either left or right table

SELECT column(s)
FROM tableA
LEFT JOIN tableB
ON tableA.column = tableB.column
UNION
SELECT column(s)
FROM tableA
RIGHT  JOIN tableB
ON tableA.column = tableB.column;

v) CROSS JOIN: It returns the Cartesian product of two tables i.e., it combines each row of the first table with each row of the second table.

The result set of a cross join is the total number of rows in the first table multiplied by the total number of rows in the second table.

SELECT * 
FROM table1
CROSS JOIN table2;


vi) SELF JOIN: It is a regular join but the table is joined with itself



SELECT column(s)
FROM tableA as a
JOIN tableB as b
ON a.col_name = b.col_name;


More: 

left exclsuive join

SELECT *
FROM student AS a
LEFT JOIN course AS b
ON a.id = b.id
WHERE b.id IS NULL;

right exclusive join

SELECT *
FROM student AS a
RIGHT JOIN course AS b
ON a.id = b.id
WHERE a.id IS NULL;

full exclusive join

SELECT *
FROM student 
LEFT JOIN courses
ON student.id = course.id
WHERE b.id is NULL
UNION
SELECT * 
FROM student
RIGHT JOIN courses
ON student.id = course.id
WHERE student.id is NULL;

32. Subqueries

SELECT * FROM student WHERE marks > (SELECT AVG(marks) FROM student);
Subquery can also be written as an IN clause:
SELECT * FROM student WHERE marks > ALL (SELECT AVG(marks) FROM student);
The EXISTS keyword returns TRUE if at least one record matches the subquery condition. It's often used for checking existence of data.
SELECT * FROM student WHERE EXISTS (SELECT * FROM city WHERE student.city = city.city_name);

33. Aggregate Functions: perform a calculation on a set of values, and return a single value

a) COUNT ()
b) MAX ()
c) MIN ()
d) SUM ()
e) AVG ()

34. String Functions

LENGTH(): returns the length of string
CONCAT(): concatenates two or more strings
SUBSTRING(): extracts a substring from a string
REPLACE(): replaces all occurrences of a substring within a string, with a new substring
REVERSE(): reverses a string and returns the result
UPPER(): converts a string to upper-case
LOWER(): converts a string to lower-case
TRIM(): removes all spaces from both sides of a string
LTRIM(): removes all spaces from the left side of a string
RTRIM(): removes all spaces from the right side of a string
CHARINDEX(): finds the position of one string inside another string

35. General Order

SELECT column(s)
FROM table_name
WHERE condition
GROUP columns(s)
HAVING condition
ORDER BY column(s) ASC;

36. Table related queries

a) UPDATE: to update existing rows

UPDATE table_name
SET col1 = val1, col2 = val2
WHERE condition

eg: 

UPDATE student 
SET grade = "O"
WHERE grade = "A";

b) DELETE: to delete existing rows

DELETE FROM table_name
WHERE condition

e.g.:
DELETE FROM student
WHERE marks < 20

37. Revisiting Foreign key

-- DELETE FROM student
-- All data will be deleted 

CREATE TABLE dept (
    id INt PRIMARY Key,
    name VARCHAR(50)
);    -> Parent table



CREATE TABLE teacher (
    id INT PRIMARY KEY,
    name VARCHAR(50),
    dept_id INT,
    FOREIGN KEY (dept_id) REFERENCES dept(id)
);   -> Child table

38. Cascading on Foreign key

a) ON DELETE CASCADE: When we create a Foreign key using this option, it deletes the referencing rows in the child table when the referecne row is deleted in the parent table which has primary key. 

b) ON UPDATE CASCADE: When we create a foreign key using UPDATE CASCADE the referencing rows are updated in the child table when the reference row is updated in the parent table which has a primary key.

UPDATE dept
SET id = 103
WHERE id = 102;

CREATE TABLE teacher (
    id INT PRIMARY KEY,
    name VARCHAR(50),
    dept_id INT,
    FOREIGN KEY (dept_id) REFERENCES dept(id)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);

36. Table related queries[contd]

c) ALTER: to change the schema

ADD column

ALTER TABLE table_name
ADD COLUMN column_name data_type constraint;

DROP column

ALTER TABLE table_name
DROP COLUMN column_name;

RENAME Table

ALTER TABLE table_name
RENAME TO new_table_name

Change Column (rename)

ALTER TABLE table_name
CHANGE COLUMN old_name new_name new_data_type constraint;

MODIFY column (modify datatype/constraint)

ALTER TABLE table_name
MODIFY COLUMN column_name new_data_type constraint;

d) TRUNCATE: to delete table's data

TRUNCATE TABLE table_name;

- Drop deleted the table but truncate deleted only the data

39. ON DELETE SET NULL: When we create a foreign key using this option, it sets the referencing column values to NULL when the reference row is deleted in the parent table which has a primary key.

40. AS: A alias

41. UNION: It is used to combine the result-set of two or more SELECT statements. Gives unique records.

To use it: 

a) Every SELECT should have same number of columns. 
b) coloumn must have similar data Types.
c) columns in every SELECT should be in same order.

SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2;

42. UNION ALL: It is used to combine the result-set of two or more SELECT statements. Gives all records. Duplicates too.

43. Subqueries: A subquery/inner query/nested query is a query within another SQL query. Can be written in SELECT, FROM, WHERE. WHERE being most popular.

It involves 2 select statements.

Syntax: 

SELECT column_name(s)
FROM table_name
WHERE column_name OPERATOR
(subquery);

e.g. SELECT name, marks
FROM student
WHERE marks > (SELECT AVG(marks) FROM student);

44. ANY: It is used to compare a value to any applicable value in the list according to the condition.

Syntax:

SELECT column_name(s)
FROM table_name
WHERE column_name OPERATOR ANY
(subquery);

e.g. SELECT name, marks
FROM student
WHERE marks > ANY (SELECT AVG(marks) FROM student);

45. ALL: It is used to compare a value with all values in the subquery and returns TRUE if all rows satisfy the condition.

Syntax:

SELECT column_name(s)
FROM table_name
WHERE column_name OPERATOR ALL
(subquery);

e.g. SELECT name, marks
FROM student
WHERE marks > ALL (SELECT AVG(marks) FROM student);

